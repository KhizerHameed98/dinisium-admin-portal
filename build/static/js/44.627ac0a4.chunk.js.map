{"version":3,"sources":["Components/ItoManagement/CreateNewSeries/index.js"],"names":["connect","createItoSeries","loadUser","startDate","endDate","fDate","lDate","cDate","dDate","dispatch","useDispatch","assignedItosData","useSelector","state","ito","data","history","useHistory","useState","show","setShow","loading","setLoading","required","setRequired","onGoingITO","auth","userDetails","ongoingData","name","start_date","end_date","description","supply","ito_id","formData","setFormData","onChange","e","target","value","map","Date","parse","handleClose","useEffect","getAssignedItos","getOngoingItoSeries","className","onSubmit","preventDefault","toast","error","type","placeholder","test","onSupplyChange","id","min","toISOString","split","disabled","onClick","series_name","saveAsDraftSeries","size","onHide","style","opacity","centered","Body","paddingLeft","Footer"],"mappings":"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","file":"static/js/44.627ac0a4.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\n// import CreateSeriesModal from \"./CreateSeriesModal\";\nimport { Alert, Button, Modal } from \"react-bootstrap\";\nimport { toast } from \"react-toastify\";\nimport {\n  createItoSeries,\n  getAssignedItos,\n  loadUser,\n  getItoSeriesById,\n  getOngoingItoSeries,\n} from \"../../../Redux/actions/actions\";\nimport { connect, useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport moment from \"moment\";\nimport { saveAsDraftSeries } from \"../../../Services/itoServices\";\n\nconst CreateNewSeries = ({ createItoSeries, loadUser }) => {\n  const dispatch = useDispatch();\n  const assignedItosData = useSelector(\n    (state) => state.ito?.assignedItosData?.data\n  );\n  const history = useHistory();\n\n  const [show, setShow] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [required, setRequired] = useState(false);\n  const userDetails = useSelector((state) => state.auth.userDetails);\n  const onGoingITO = useSelector((state) => state?.ito?.ongoingData?.data);\n  let startDate;\n  let endDate;\n\n  //alert tost\n\n  const alertToast = (error, message) => {\n    if (!error) {\n      toast.success(message, {\n        position: \"top-right\",\n        autoClose: 5000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n      });\n    } else {\n      toast.error(message, {\n        position: \"top-right\",\n        autoClose: 5000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n      });\n    }\n  };\n\n  const [formData, setFormData] = useState({\n    name: \"\",\n    start_date: \"\",\n    end_date: \"\",\n    description: \"\",\n    supply: \"\",\n    ito_id: \"\",\n  });\n\n  const { name, start_date, end_date, description, supply, ito_id } = formData;\n  const onChange = (e) => {\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n  };\n\n  const onSupplyChange = (e) => {\n    const re = /^[0-9\\b]+$/;\n    if (e.target.value === \"\" || re.test(e.target.value)) {\n      setFormData({ ...formData, [e.target.name]: e.target.value });\n    }\n  };\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    if (\n      (cDate <= lDate && cDate >= fDate) ||\n      (dDate <= lDate && dDate >= fDate)\n    ) {\n      toast.error(\n        \"ITO series in this date range already exists, please select another start and end date\"\n      );\n    } else {\n      setShow(true);\n    }\n  };\n  onGoingITO?.map((ito) => {\n    if (ito.ito_id == ito_id) {\n      startDate = ito.start_date;\n      endDate = ito.end_date;\n    }\n  });\n\n  // const startCheck = moment(start_date).format('YYYY/MM/DD')\n  // const endCheck = moment(end_date).format('YYYY/MM/DD')\n\n  // console.log('START DATE IS =======>', startDate)\n  // console.log('END DATE IS ====>', endDate)\n\n  var fDate, lDate, cDate, dDate, today;\n  fDate = Date.parse(startDate);\n  lDate = Date.parse(endDate);\n  cDate = Date.parse(start_date);\n  dDate = Date.parse(end_date);\n\n  const handleCreateItoSeries = () => {\n    setLoading(true);\n    createItoSeries({\n      formData,\n      setFormData,\n      setLoading,\n      history,\n    });\n    setShow(false);\n  };\n\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n\n  useEffect(() => {\n    dispatch(getAssignedItos());\n    dispatch(getOngoingItoSeries());\n  }, []);\n\n  const handleSeriesDraft = (e) => {\n    e.preventDefault();\n    setRequired(false);\n    const data = {\n      series_name: formData.name || null,\n      start_date: formData.start_date || null,\n      end_date: formData.end_date || null,\n      description: formData.description || null,\n      supply: formData.supply || null,\n      ito_id: formData.ito_id || null,\n    };\n    dispatch(saveAsDraftSeries(data));\n  };\n\n  return (\n    <div className=\"col-12 col-md-8 offset-md-2\">\n      {/* <!-- inner row --> */}\n      <div className=\"row\">\n        <div className=\"col-md-12\">\n          <div className=\"card mb-4\">\n            <div className=\"card-body p-5\">\n              <form className=\"form\" onSubmit={onSubmit}>\n                <div className=\"form-group row\">\n                  <div className=\"col-sm-6\">\n                    <div className=\"form-group\">\n                      <label>Series Name</label>\n                      <input\n                        type=\"text\"\n                        placeholder=\"Series Name\"\n                        className=\"form-control\"\n                        name=\"name\"\n                        value={name}\n                        onChange={(e) => onChange(e)}\n                        required={required}\n                      />\n                    </div>\n                  </div>\n                  <div className=\"col-sm-6\">\n                    <div className=\"form-group\">\n                      <label>Supply</label>\n                      <input\n                        type=\"text\"\n                        placeholder=\"Supply\"\n                        className=\"form-control\"\n                        name=\"supply\"\n                        value={supply}\n                        onChange={(e) => onSupplyChange(e)}\n                        required={required}\n                      />\n                    </div>\n                  </div>\n                  <div className=\"col-sm-6\">\n                    <div className=\"form-group\">\n                      <label>Select ITO</label>\n                      <select\n                        name=\"ito_id\"\n                        className=\"form-control\"\n                        onChange={onChange}\n                        placeholder=\"Select Status\"\n                      >\n                        <option value=\"\">Select...</option>\n                        {assignedItosData?.map((ito) => (\n                          <option value={ito.id} key={ito.id}>\n                            {ito.name}\n                          </option>\n                        ))}\n                      </select>\n                    </div>\n                  </div>\n                  <div className=\"col-sm-6\">\n                    <label>Start Date</label>\n                    <input\n                      type=\"date\"\n                      placeholder=\"Start Date\"\n                      className=\"form-control\"\n                      name=\"start_date\"\n                      value={start_date}\n                      min={new Date().toISOString().split(\"T\")[0]}\n                      onChange={(e) => onChange(e)}\n                      required={required}\n                    />\n                  </div>\n                  <div className=\"col-sm-6\">\n                    <div className=\"form-group\">\n                      <label>End Date</label>\n                      <input\n                        type=\"date\"\n                        placeholder=\"End Date\"\n                        className=\"form-control\"\n                        name=\"end_date\"\n                        value={end_date}\n                        min={new Date().toISOString().split(\"T\")[0]}\n                        onChange={(e) => onChange(e)}\n                        required={required}\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"col-sm-12\">\n                    <label>Description</label>\n                    <textarea\n                      placeholder=\"Description\"\n                      className=\"form-control\"\n                      name=\"description\"\n                      value={description}\n                      onChange={(e) => onChange(e)}\n                      required={required}\n                    ></textarea>\n                  </div>\n                </div>\n                <button\n                  type=\"submit\"\n                  className=\"btn btn-primary btn-lg\"\n                  disabled={loading}\n                >\n                  {loading && (\n                    <span className=\"spinner-border spinner-border-sm\"></span>\n                  )}{\" \"}\n                  CREATE NEW SERIES\n                </button>\n              </form>\n              <button\n                className=\"btn btn-primary btn-lg seriesdraft\"\n                onClick={handleSeriesDraft}\n              >\n                {loading && (\n                  <span className=\"spinner-border spinner-border-sm\"></span>\n                )}{\" \"}\n                SAVE AS DRAFT\n              </button>\n              {/* <!-- Modal --> */}\n              {/* <CreateSeriesModal show={show} setShow={setShow} /> */}\n              {/* <!--end Modal --> */}\n            </div>\n          </div>\n        </div>\n      </div>\n      {/* <!-- end inner row --> */}\n\n      {/* <!-- modal start --> */}\n      {show && (\n        <Modal\n          size=\"md\"\n          show={show}\n          onHide={handleClose}\n          style={{ opacity: 1 }}\n          centered\n        >\n          <div className=\"modal-header border-0\">\n            <button type=\"button\" className=\"close\" onClick={handleClose}>\n              <span className=\"font-18\">&times;</span>\n            </button>\n          </div>\n          <Modal.Body className=\"text-center\">\n            <div>\n              <p>\n                Are you sure, you you want to create <strong>ITO series</strong>\n                {/* create ITO series create<strong>successfully</strong> */}\n              </p>\n            </div>\n\n            <ul className=\"row data-confirmation\">\n              <li className=\"col-12 col-md-6\">\n                <span>Asset Name : </span>\n                <span style={{ paddingLeft: \"4px\" }}>{name}</span>\n              </li>\n              <li className=\"col-12 col-md-6\">\n                <span>Supply : </span>\n                <span style={{ paddingLeft: \"4px\" }}>{supply}</span>\n              </li>\n              <li className=\"col-12 col-md-6\">\n                <span>Start Date : </span>\n                <span style={{ paddingLeft: \"4px\" }}>{start_date} $</span>\n              </li>\n              <li className=\"col-12 col-md-6\">\n                <span>End Date : </span>\n                <span style={{ paddingLeft: \"4px\" }}>{end_date}</span>\n              </li>\n              <li className=\"col-12 col-md-6\">\n                <span>Description : </span>\n                <span style={{ paddingLeft: \"4px\" }}>{description}</span>\n              </li>\n            </ul>\n\n            <button\n              type=\"button\"\n              className=\"btn btn-primary w-25 btn-md\"\n              // onClick={handleClose}\n              onClick={handleCreateItoSeries}\n            >\n              Ok\n            </button>\n          </Modal.Body>\n          <Modal.Footer className=\"border-0\"></Modal.Footer>\n        </Modal>\n      )}\n\n      {/* <!-- modal end --> */}\n    </div>\n  );\n};\n\nexport default connect(null, { createItoSeries, loadUser })(CreateNewSeries);\n"],"sourceRoot":""}